"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const discord_js_1 = require("discord.js");
const DiscordTriviaError_1 = require("./DiscordTriviaError");
const RootComponent_1 = require("./RootComponent");
const TriviaGame_1 = require("./TriviaGame");
const constants_1 = require("../../constants");
/**
 * @class Class for creating and managing ongiong games.
 */
class TriviaManager {
    constructor(options) {
        this.games = new discord_js_1.Collection();
        this.validator = {
            validateDiscordStructures(game) {
                if (game.guild === null) {
                    const { message, header } = DiscordTriviaError_1.default.errors.guildNullish;
                    throw new DiscordTriviaError_1.default(message, header);
                }
                else if (game.channel === null) {
                    const { message, header } = DiscordTriviaError_1.default.errors.channelNullish;
                    throw new DiscordTriviaError_1.default(message, header);
                }
                else if (game.channel.type != discord_js_1.ChannelType.GuildText) {
                    // game.channel.type (:ChannelType.GuildText) != ChannelType.GuildText always returns true
                    const { message, header } = DiscordTriviaError_1.default.errors.channelNonText;
                    throw new DiscordTriviaError_1.default(message, header);
                }
            },
            validatePlayerCount(label, val) {
                if (!val && val != 0) {
                    throw new DiscordTriviaError_1.default(`A ${label} option for TriviaGameOptions is required`, "MISSING_OPTION");
                }
                else if (typeof val != "number" && typeof val != "string") {
                    throw new DiscordTriviaError_1.default(`The ${label} option for TriviaGameOptions must be of type number or string`, "INVALID_OPTION");
                }
                else if (isNaN(+val)) {
                    throw new DiscordTriviaError_1.default(`The ${label} option for TriviaGameOptions must be a number resolvable`, "INVALID_OPTION");
                }
                else if (+val % 1 !== 0) {
                    throw new DiscordTriviaError_1.default(`The ${label} option for TriviaGameOptions must be a whole integer`, "INVALID_OPTION");
                }
                else if (+val < 1) {
                    throw new DiscordTriviaError_1.default(`The ${label} option for TriviaGameOptions must be greater than or equal to 1`, "INVALID_OPTION");
                }
            },
            checkPlayerCountRelation(min, max) {
                if (min > max)
                    throw new DiscordTriviaError_1.default("The maximumPlayerCount option for TriviaGameOptions cannot be less than the minimumPlayerCountOption", "INVALID_OPTION");
            },
            validatePointRange(label, val) {
                if (!val && val != 0) {
                    throw new DiscordTriviaError_1.default(`A ${label} option for TriviaGameOptions is required`, "MISSING_OPTION");
                }
                else if (typeof val != "number" && typeof val != "string") {
                    throw new DiscordTriviaError_1.default(`The ${label} option for TriviaGameOptions must be of type number or string`, "INVALID_OPTION");
                }
                else if (isNaN(+val)) {
                    throw new DiscordTriviaError_1.default(`The ${label} option for TriviaGameOptions must be a number resolvable`, "INVALID_OPTION");
                }
                else if (+val % 1 !== 0) {
                    throw new DiscordTriviaError_1.default(`The ${label} option for TriviaGameOptions must be a whole integer`, "INVALID_OPTION");
                }
                else if (+val < 1) {
                    throw new DiscordTriviaError_1.default(`The ${label} option for TriviaGameOptions must be greater than or equal to 1`, "INVALID_OPTION");
                }
            },
            checkPointRangeRelation(min, max) {
                if (min > max)
                    throw new DiscordTriviaError_1.default("The maxPoints option for TriviaGameOptions cannot be less than the minPoints", "INVALID_OPTION");
            },
            validateTimePerQuestion(val) {
                if (!val && val != 0) {
                    throw new DiscordTriviaError_1.default(`A timePerQuestion option for TriviaGameOptions is required`, "MISSING_OPTION");
                }
                else if (typeof val != "number" && typeof val != "string") {
                    throw new DiscordTriviaError_1.default("The timePerQuestion option for TriviaGameOptions must be of type number or string", "INVALID_OPTION");
                }
                else if (isNaN(+val)) {
                    throw new DiscordTriviaError_1.default("The timePerQuestion option for TriviaGameOptions must be a number resolvable", "INVALID_OPTION");
                }
                else if (+val % 1 !== 0) {
                    throw new DiscordTriviaError_1.default("The timePerQuestion option for TriviaGameOptions must be a whole integer", "INVALID_OPTION");
                }
                else if (+val < 1000) {
                    throw new DiscordTriviaError_1.default("The timePerQuestion option for TriviaGameOptions must be greater than or equal to 1000ms", "INVALID_OPTION");
                }
            },
            validateQuestionAmount(val) {
                if (!val && val != 0) {
                    throw new DiscordTriviaError_1.default(`An amount option for TriviaGameOptions.questionData is required`, "MISSING_OPTION");
                }
                else if (typeof val != "number" && typeof val != "string") {
                    throw new DiscordTriviaError_1.default("The amount option for TriviaGameOptions.questionData must be of type number or string", "INVALID_OPTION");
                }
                else if (isNaN(+val)) {
                    throw new DiscordTriviaError_1.default("The amount option for TriviaGameOptions.questionData must be a number resolvable", "INVALID_OPTION");
                }
                else if (+val % 1 !== 0) {
                    throw new DiscordTriviaError_1.default("The amount option for TriviaGameOptions.questionData must be a whole integer", "INVALID_OPTION");
                }
                else if (+val < 1) {
                    throw new DiscordTriviaError_1.default("The amount option for TriviaGameOptions.questionData must be greater than or equal to 1", "INVALID_OPTION");
                }
            },
            validateQuestionDifficulty(val) {
                if (val === null)
                    return;
                if (!val) {
                    throw new DiscordTriviaError_1.default(`A difficulty option for TriviaGameOptions.questionData is required`, "MISSING_OPTION");
                }
                else if (typeof val != "string") {
                    throw new DiscordTriviaError_1.default(`The difficulty option for TriviaGameOptions.questionData must be a string`, "INVALID_OPTION");
                }
                else if (!["easy", "medium", "hard"].includes(val.toLowerCase())) {
                    throw new DiscordTriviaError_1.default(`Supplied difficulty option (${val}) is not a difficulty resolvable`, "INVALID_OPTION");
                }
            },
            validateQuestionType(val) {
                if (val === null)
                    return;
                if (!val) {
                    throw new DiscordTriviaError_1.default(`A type option for TriviaGameOptions.questionData is required`, "MISSING_OPTION");
                }
                else if (typeof val != "string") {
                    throw new DiscordTriviaError_1.default(`The type option for TriviaGameOptions.questionData must be a string`, "INVALID_OPTION");
                }
                else if (!["multiple", "boolean"].includes(val.toLowerCase())) {
                    throw new DiscordTriviaError_1.default(`Supplied type option (${val}) is not a type resolvable`, "INVALID_OPTION");
                }
            },
            validateQueueTime(val) {
                if (!val && val != 0) {
                    throw new DiscordTriviaError_1.default(`A queueTime option for TriviaGameOptions is required`, "MISSING_OPTION");
                }
                else if (typeof val != "number" && typeof val != "string") {
                    throw new DiscordTriviaError_1.default("The queueTime option for TriviaGameOptions must be of type number or string", "INVALID_OPTION");
                }
                else if (isNaN(+val)) {
                    throw new DiscordTriviaError_1.default("The queueTime option for TriviaGameOptions must be a number resolvable", "INVALID_OPTION");
                }
                else if (+val % 1 !== 0) {
                    throw new DiscordTriviaError_1.default("The queueTime option for TriviaGameOptions must be a whole integer", "INVALID_OPTION");
                }
                else if (+val < 1000) {
                    throw new DiscordTriviaError_1.default("The queueTime option for TriviaGameOptions must be greater than or equal to 1000ms", "INVALID_OPTION");
                }
            },
            validatePointsPerStreakAmount(val) {
                if (!val) {
                    throw new DiscordTriviaError_1.default(`A pointsPerStreakAmount option for TriviaGameOptions is required`, "MISSING_OPTION");
                }
                else if (typeof val != "number" && typeof val != "string") {
                    throw new DiscordTriviaError_1.default("The pointsPerStreakAmount option for TriviaGameOptions must be of type number or string", "INVALID_OPTION");
                }
                else if (isNaN(+val)) {
                    throw new DiscordTriviaError_1.default("The pointsPerStreakAmount option for TriviaGameOptions must be a number resolvable", "INVALID_OPTION");
                }
                else if (+val % 1 !== 0) {
                    throw new DiscordTriviaError_1.default("The pointsPerStreakAmount option for TriviaGameOptions must be a whole integer", "INVALID_OPTION");
                }
                else if (+val < 0) {
                    throw new DiscordTriviaError_1.default("The pointsPerStreakAmount option for TriviaGameOptions must be greater than or equal to 0", "INVALID_OPTION");
                }
            },
            validateMaximumStreakBonus(val) {
                if (!val && val != 0) {
                    throw new DiscordTriviaError_1.default(`A maximumStreakBonus option for TriviaGameOptions is required`, "MISSING_OPTION");
                }
                else if (typeof val != "number" && typeof val != "string") {
                    throw new DiscordTriviaError_1.default("The maximumStreakBonus option for TriviaGameOptions must be of type number or string", "INVALID_OPTION");
                }
                else if (isNaN(+val)) {
                    throw new DiscordTriviaError_1.default("The maximumStreakBonus option for TriviaGameOptions must be a number resolvable", "INVALID_OPTION");
                }
                else if (+val % 1 !== 0) {
                    throw new DiscordTriviaError_1.default("The maximumStreakBonus option for TriviaGameOptions must be a whole integer", "INVALID_OPTION");
                }
                else if (+val < 0) {
                    throw new DiscordTriviaError_1.default("The maximumStreakBonus option for TriviaGameOptions must be greater than or equal to 0", "INVALID_OPTION");
                }
            },
            validateGameOptions(obj) {
                if (Array.isArray(obj.questionData))
                    return;
                try {
                    this.validatePlayerCount("minimumPlayerCount", obj.minimumPlayerCount);
                    this.validatePlayerCount("maximumPlayerCount", obj.maximumPlayerCount);
                    this.validatePointRange("maxPoints", obj.maximumPoints);
                    this.validatePointRange("minPoints", obj.minimumPoints);
                    this.checkPlayerCountRelation(obj.minimumPlayerCount, obj.maximumPlayerCount);
                    this.checkPointRangeRelation(obj.minimumPoints, obj.maximumPoints);
                    const { difficulty, amount, type } = obj.questionData;
                    this.validateTimePerQuestion(obj.timePerQuestion);
                    difficulty !== null && this.validateQuestionDifficulty(difficulty);
                    this.validateQuestionAmount(amount);
                    type !== null && this.validateQuestionType(type);
                    this.validateQueueTime(obj.queueTime);
                    this.validatePointsPerStreakAmount(obj.pointsPerStreakAmount);
                    this.validateMaximumStreakBonus(obj.maximumStreakBonus);
                }
                catch (err) {
                    throw err;
                }
            },
        };
        this.options = options
            ? Object.assign(TriviaManager.defaults, options)
            : TriviaManager.defaults;
    }
    /**
     * Returns an instance of a TriviaGame
     * @param {CommandInteraction} interaction - The interaction to assign to the game.
     * @param {Partial<TriviaGameOptions>?} options - The configuration options to assign to the game (optional)
     */
    createGame(root, options) {
        const component = new RootComponent_1.default(root);
        if (this.games.has(component.channel.id)) {
            const errorMessage = "There's already an ongoing game in this channel";
            component.reply[component.type]({
                content: errorMessage,
                ephemeral: true,
            });
            throw new DiscordTriviaError_1.default(errorMessage, "ONGOING_GAME");
        }
        return new TriviaGame_1.default(component, this, options);
    }
}
exports.default = TriviaManager;
TriviaManager.defaults = {
    theme: "Blurple",
    showAnswers: true,
    image: constants_1.default.libraryDefaults.defaultEmbedImage,
};
