"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const builders_1 = require("@discordjs/builders");
const TriviaGame_1 = require("./TriviaGame");
class TriviaCommandBuilder {
    constructor(options) {
        var _a, _b;
        this.gameOptions = TriviaGame_1.default.defaults;
        this.isApplied = false;
        this.optionApplicators = {
            maximumPlayerCount: () => {
                this.build.addIntegerOption((opt) => opt
                    .setName("maximum_player_count")
                    .setDescription("The maximum amount of players allowed to join this match")
                    .setRequired(false));
            },
            maximumPoints: () => {
                this.build.addIntegerOption((opt) => opt
                    .setName("maximum_points")
                    .setDescription("The maximum amount of points a player can earn per question")
                    .setRequired(false));
            },
            minimumPlayerCount: () => {
                this.build.addIntegerOption((opt) => opt
                    .setName("minimum_player_count")
                    .setDescription("The minimum amount of players required to start the match")
                    .setRequired(false));
            },
            minimumPoints: () => {
                this.build.addIntegerOption((opt) => opt
                    .setName("minimum_points")
                    .setDescription("The minimum amount of points a player can earn per question")
                    .setRequired(false));
            },
            questionAmount: () => {
                this.build.addIntegerOption((opt) => opt
                    .setName("question_amount")
                    .setDescription("The number of questions")
                    .setRequired(false));
            },
            questionDifficulty: () => {
                this.build.addStringOption((opt) => opt
                    .setName("question_difficulty")
                    .setDescription("The difficulty all questions should be")
                    .addChoices({ name: "Easy", value: "easy" }, { name: "Medium", value: "medium" }, { name: "Hard", value: "hard" })
                    .setRequired(false));
            },
            questionType: () => {
                this.build.addStringOption((opt) => opt
                    .setName("question_type")
                    .setDescription("The question type for all questions")
                    .addChoices({ name: "Multiple Choice", value: "multiple" }, { name: "false/False", value: "boolean" })
                    .setRequired(false));
            },
            queueTime: () => {
                this.build.addIntegerOption((opt) => opt
                    .setName("queue_time")
                    .setDescription("How long to await players before starting the match")
                    .setRequired(false));
            },
            timePerQuestion: () => {
                this.build.addIntegerOption((opt) => opt
                    .setName("time_per_question")
                    .setDescription("How long each round should last (in milliseconds)")
                    .setRequired(false));
            },
            triviaCategory: () => {
                this.build.addStringOption((opt) => opt
                    .setName("category")
                    .setDescription("The category for the questions")
                    .addChoices({ name: "General Knowledge", value: "9" }, { name: "Entertainment: Books", value: "10" }, { name: "Entertainment: Film", value: "11" }, { name: "Entertainment: Music", value: "12" }, { name: "Entertainment: Musicals and Theatres", value: "13" }, { name: "Entertainment: Television", value: "14" }, { name: "Entertainment: Video Games", value: "15" }, { name: "Entertainment: Board Games", value: "16" }, { name: "Science and Nature", value: "17" }, { name: "Science: Computers", value: "18" }, { name: "Science Mathematics", value: "19" }, { name: "Mythology", value: "20" }, { name: "Sports", value: "21" }, { name: "Geography", value: "22" }, { name: "History", value: "23" }, { name: "Politics", value: "24" }, { name: "Art", value: "25" }, { name: "Celebrities", value: "26" }, { name: "Animals", value: "27" }, { name: "Vehicles", value: "28" }, { name: "Entertainment: Comics", value: "29" }, { name: "Science: Gadgets", value: "30" }, { name: "Entertainment: Japanese Anime and Manga", value: "31" }, { name: "Entertainment: Cartoon and Animations", value: "32" })
                    .setRequired(false));
            },
            timeBetweenRounds: () => {
                this.build.addIntegerOption((opt) => opt
                    .setName("time_between_rounds")
                    .setDescription("How long to wait between rounds in ms")
                    .setRequired(false));
            },
            pointsPerStreakAmount: () => {
                this.build.addIntegerOption((opt) => opt
                    .setName("points_per_streak")
                    .setDescription("How many bonus points to award per streak accumulation")
                    .setRequired(false));
            },
            maximumStreakBonus: () => {
                this.build.addIntegerOption((opt) => opt
                    .setName("max_streak_bonus")
                    .setDescription("Maximum bonus for accumulated streaks")
                    .setRequired(false));
            },
            streakDefinitionLevel: () => {
                this.build.addIntegerOption((opt) => opt
                    .setName("streak_level")
                    .setDescription("At which consecutive correct answer to start streak")
                    .setRequired(false));
            },
        };
        this.build = new builders_1.SlashCommandBuilder()
            .setName((_a = options === null || options === void 0 ? void 0 : options.name) !== null && _a !== void 0 ? _a : "trivia")
            .setDescription((_b = options === null || options === void 0 ? void 0 : options.description) !== null && _b !== void 0 ? _b : "Create a trivia game.");
    }
    applyOptions() {
        Object.values(this.optionApplicators).forEach((func) => func());
    }
    toJSON() {
        if (!this.isApplied) {
            this.applyOptions();
            this.isApplied = false;
        }
        return this.build.toJSON();
    }
    toBuilder() {
        if (!this.isApplied) {
            this.applyOptions();
            this.isApplied = false;
        }
        return this.build;
    }
    getOptions(int, additionalOptions) {
        var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l, _m, _o, _p;
        const maximumPlayerCount = (_a = int.options.get("maximum_player_count", false)) === null || _a === void 0 ? void 0 : _a.value;
        const maximumPoints = (_b = int.options.get("maximum_points", false)) === null || _b === void 0 ? void 0 : _b.value;
        const minimumPlayerCount = (_c = int.options.get("minimum_player_count", false)) === null || _c === void 0 ? void 0 : _c.value;
        const minimumPoints = (_d = int.options.get("minimum_points", false)) === null || _d === void 0 ? void 0 : _d.value;
        const questionAmount = (_e = int.options.get("question_amount", false)) === null || _e === void 0 ? void 0 : _e.value;
        const questionDifficulty = (_f = int.options.get("question_difficulty", false)) === null || _f === void 0 ? void 0 : _f.value;
        const questionType = (_g = int.options.get("question_type", false)) === null || _g === void 0 ? void 0 : _g.value;
        const queueTime = (_h = int.options.get("queue_time", false)) === null || _h === void 0 ? void 0 : _h.value;
        const timePerQuestion = (_j = int.options.get("time_per_question", false)) === null || _j === void 0 ? void 0 : _j.value;
        const triviaCategory = (_k = int.options.get("category", false)) === null || _k === void 0 ? void 0 : _k.value;
        const timeBetweenRounds = (_l = int.options.get("time_between_rounds", false)) === null || _l === void 0 ? void 0 : _l.value;
        const pointsPerStreakAmount = (_m = int.options.get("points_per_streak", false)) === null || _m === void 0 ? void 0 : _m.value;
        const maximumStreakBonus = (_o = int.options.get("max_streak_bonus", false)) === null || _o === void 0 ? void 0 : _o.value;
        const streakDefinitionLevel = (_p = int.options.get("streak_level", false)) === null || _p === void 0 ? void 0 : _p.value;
        let options = {};
        options.maximumPlayerCount =
            maximumPlayerCount || TriviaGame_1.default.defaults.maximumPlayerCount;
        options.maximumPoints = maximumPoints || TriviaGame_1.default.defaults.maximumPoints;
        options.minimumPlayerCount =
            minimumPlayerCount || TriviaGame_1.default.defaults.minimumPlayerCount;
        options.minimumPlayerCount =
            minimumPlayerCount || TriviaGame_1.default.defaults.minimumPlayerCount;
        options.minimumPoints = minimumPoints || TriviaGame_1.default.defaults.minimumPoints;
        if (!Array.isArray(options.questionData)) {
            options.questionData = {};
            options.questionData.amount =
                questionAmount ||
                    TriviaGame_1.default.defaults.questionData.amount;
            options.questionData.difficulty = (questionDifficulty ||
                TriviaGame_1.default.defaults.questionData
                    .difficulty);
            options.questionData.type = (questionType ||
                TriviaGame_1.default.defaults.questionData
                    .type);
            options.queueTime = queueTime || TriviaGame_1.default.defaults.queueTime;
            options.timePerQuestion =
                timePerQuestion || TriviaGame_1.default.defaults.timePerQuestion;
            options.questionData.category =
                triviaCategory ||
                    TriviaGame_1.default.defaults.questionData.category;
        }
        options.timeBetweenRounds =
            timeBetweenRounds || TriviaGame_1.default.defaults.timeBetweenRounds;
        options.pointsPerStreakAmount =
            pointsPerStreakAmount || TriviaGame_1.default.defaults.pointsPerStreakAmount;
        options.maximumStreakBonus =
            maximumStreakBonus || TriviaGame_1.default.defaults.maximumStreakBonus;
        options.streakDefinitionLevel =
            streakDefinitionLevel || TriviaGame_1.default.defaults.streakDefinitionLevel;
        if (additionalOptions)
            Object.assign(options, additionalOptions);
        return options;
    }
}
exports.default = TriviaCommandBuilder;
